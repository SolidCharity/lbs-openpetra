--- a/csharp/ICT/Common/IO/PatchTools.cs	2014-11-26 16:18:29.110961935 +0000
+++ b/csharp/ICT/Common/IO/PatchTools.cs	2014-11-26 21:05:26.730438063 +0000
@@ -99,10 +99,7 @@
         /// <returns></returns>
         public Boolean PatchApplies(String APatchZipFile)
         {
-            StringCollection versions = GetVersionsFromDiffZipName(APatchZipFile);
-            TFileVersionInfo patchStartVersion = new TFileVersionInfo(versions[0]);
-
-            return patchStartVersion.Compare(this) == 0;
+            return TPatchFileVersionInfo.PatchApplies(this, APatchZipFile);
         }
 
         /// <summary>
@@ -112,6 +109,13 @@
         {
             StringCollection versions = GetVersionsFromDiffZipName(APatchZipFile);
             TFileVersionInfo patchStartVersion = new TFileVersionInfo(versions[0]);
+            
+            // generic patch
+            if (patchStartVersion.FilePrivatePart == 0)
+            {
+                TFileVersionInfo patchEndVersion = new TFileVersionInfo(versions[1]);
+                return patchEndVersion.Compare(ACurrentVersion) > 0;
+            }
 
             return patchStartVersion.Compare(ACurrentVersion) == 0;
         }
@@ -1215,20 +1219,6 @@
 
             if (FLatestAvailablePatch.Compare(testPatchVersion) != 0)
             {
-                // check for a generic patch file, starting from version 0.0.99.99
-                foreach (string patch in AOrderedListOfAllPatches.GetValueList())
-                {
-                    if (patch.Contains("0.0.99.99"))
-                    {
-                        testPatchVersion = TPatchFileVersionInfo.GetLatestPatchVersionFromDiffZipName(patch);
-                        ResultPatchList.Clear();
-                        ResultPatchList.Add(patch, patch);
-                    }
-                }
-            }
-
-            if (FLatestAvailablePatch.Compare(testPatchVersion) != 0)
-            {
                 TLogging.Log("missing patchfile from version " + testPatchVersion.ToString() + " to " + FLatestAvailablePatch.ToString());
                 return new SortedList();
             }
@@ -1283,6 +1273,15 @@
                 }
             }

+            // compiling on Linux with Mono, we cannot use the manifest that tells the UAC that running a exe with patch in the name is fine without administrator rights
+            // therefore we rename the file so that the normal user can execute it
+            string newNameUAC = APatchDirectory + Path.DirectorySeparatorChar + "Ict.Tools.Ptchtool.exe";
+            if (File.Exists(newNameUAC))
+            {
+               File.Delete(newNameUAC);
+            }
+            File.Move(APatchDirectory + Path.DirectorySeparatorChar + "Ict.Tools.PatchTool.exe", newNameUAC);
+
             // check for the latest version of those files in the new patches
             foreach (string patch in FListOfNewPatches.GetValueList())
             {
@@ -1303,4 +1295,4 @@
             }
         }
     }
-}
\ No newline at end of file
+}
--- a/csharp/ICT/Petra/Client/app/MainWindow/PetraClientMain.cs	2014-11-26 21:08:03.186433302 +0000
+++ b/csharp/ICT/Petra/Client/app/MainWindow/PetraClientMain.cs	2014-11-26 21:08:45.794432006 +0000
@@ -258,7 +258,7 @@
                     // check for newer patchtool
                     patchTools.CopyLatestPatchProgram(TempPath);
 
-                    string PatchToolExe = TempPath + Path.DirectorySeparatorChar + "Ict.Tools.PatchTool.exe";
+                    string PatchToolExe = TempPath + Path.DirectorySeparatorChar + "Ict.Tools.PtchTool.exe";
 
                     if (!File.Exists(PatchToolExe))
                     {
